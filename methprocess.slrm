#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --time=24:00:00
#SBATCH --mem=64G
#SBATCH --output=MethPipe_%A.out
#SBATCH --error=MethPipe_%A.error
#SBATCH --mail-user=mary.chalkley@vanderbilt.edu
#SBATCH --mail-type=END
#SBATCH --job-name="MethPipe"

# Necessary to set this for proper sorting
export LC_ALL=C
module restore methpipe_tools

# Sets up naming scheme for output files
# MAPPED=`basename $SAM .sam`
# OUT=/data/ihrie_lab/9593_data/data/methprocessed
# MAPPED=`basename $METH .meth`  
MAPPED=/data/ihrie_lab/9593_data/results/TSP77_allsample_iPSC_merge
# MAPPED=/data/ihrie_lab/9593_data/results/TSP77_allsample_d10_merge
OUT=/data/ihrie_lab/9593_data/results/merged

if test -d ${OUT}; then  echo "exist"; else mkdir ${OUT} && echo created; fi
echo ${METH}

# Convert sam to bam & filter for MAPQ > 30 & sort bam
# echo "convert sam to bam & filter for MAPQ > 30 & sort bam"
# samtools view -@ 8 -S -b -q 30 ${SAM} | samtools sort -@8 - -o ${OUT}/${MAPPED}_q30.bam

module restore methpipe_tools
# Convert bam output to appropriate formatting used by methpipe tools
# format_reads -o ${OUT}/${MAPPED}_f.sam -f abismal ${SAM}
# echo "run format_reads on sam"

# Sort sam
# samtools sort -O sam -o ${OUT}/${MAPPED}_fs.sam ${OUT}/${MAPPED}_f.sam

# Remove duplicate reads
# duplicate-remover -s -A -S ${OUT}/${MAPPED}.dupstats ${OUT}/${MAPPED}_fs.sam ${OUT}/${MAPPED}_fsd.sam

# Estimate bisulfite conversion rate for sequencing library
# bsrate  -c ${CHROM_DIR} -o ${OUT}/${MAPPED}.bsrate ${OUT}/${MAPPED}_fsd.sam

# Generate epiread formate files for use in other downstream methpipe tools such as finding DMRs
# methstates -c ${CHROM_DIR} ${OUT}/${MAPPED}_fsd.sam -o ${OUT}/${MAPPED}.epiread

# Calculate methylation rate for all individual cytosines in the genome
# methcounts -c ${CHROM_DIR} -o ${OUT}/${MAPPED}.all.meth ${OUT}/${MAPPED}_fsd.sam

# Calculate statistics on the coverage and methylation levels for different context cytosines
# levels -o ${OUT}/${MAPPED}.levels  ${OUT}/${MAPPED}.all.meth

# Get methylation rate for only symmetric CpG context cytosines
# symmetric-cpgs -m -o ${PROCESSED_DIR}/${MAPPED}.meth ${OUT}/${MAPPED}.all.meth
# echo "formed methcounts and filtered for symmetric CpGs"

#filter methylation files for coverage of at least 5 per CpG site
awk '{ if ($6 >= 5) { print } }' ${PROCESSED_DIR}/${MAPPED}.meth > ${PROCESSED_DIR}/${MAPPED}.cov5.meth

#sort .meth files
LC_ALL=C sort -k 1,1 -k 3,3n -k 2,2n -k 6,6 -o ${PROCESSED_DIR}/${MAPPED}.cov5.meth.sorted ${PROCESSED_DIR}/${MAPPED}.cov5.meth

# Scan for hypomethylated regions
hmr -o ${PROCESSED_DIR}/${MAPPED}.hmr -p ${OUT}/${MAPPED}.hmrparams  ${PROCESSED_DIR}/${MAPPED}.cov5.meth.sorted
# hmr -o ${PROCESSED_DIR}/${MAPPED}.hmr -p ${OUT}/${MAPPED}.hmrparams  ${PROCESSED_DIR}/${MAPPED}.cov5.meth

if test -d ${PROCESSED_DIR}/tracks; then  echo "exist"; else mkdir ${PROCESSED_DIR}/tracks && echo created; fi

# Generate bigwig of symmetric CpG covering reads
awk '{OFS="\t"; print $1,$2,$2+1,$6}' < ${PROCESSED_DIR}/${MAPPED}.cov5.meth | wigToBigWig /dev/stdin ${SIZES_DIR} ${PROCESSED_DIR}/tracks/${MAPPED}.read.bw

# Generate bigwig of methylation levels for symmetric CpGs
awk '{OFS="\t"; print $1,$2,$2+1,$5}' < ${PROCESSED_DIR}/${MAPPED}.cov5.meth | wigToBigWig /dev/stdin ${SIZES_DIR} ${PROCESSED_DIR}/tracks/${MAPPED}.meth.bw

# Generate bigBed file of genomic intervals called as hypomethylated regions
cut -f 1-3 ${PROCESSED_DIR}/${MAPPED}.hmr > ${PROCESSED_DIR}/${MAPPED}.hmr.tmp
bedToBigBed ${PROCESSED_DIR}/${MAPPED}.hmr.tmp ${SIZES_DIR} ${PROCESSED_DIR}/tracks/${MAPPED}.hmr.bb && rm ${PROCESSED_DIR}/${MAPPED}.hmr.tmp

